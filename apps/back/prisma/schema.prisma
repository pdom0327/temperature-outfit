generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  locationId    Int       @default(1)
  location      Location  @relation(fields: [locationId], references: [id])
  init          Boolean   @default(false)
  products      Product[]
  outfits       Outfit[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Location {
  id        Int       @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  code      Int
  User      User[]
  Weather   Weather[]
  Outfit    Outfit[]
}

model Category {
  id             String           @id
  name           String
  order          Int
  parentId       String?
  parent         Category?        @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children       Category[]       @relation("ParentChildren")
  Product        Product[]
  DefaultProduct DefaultProduct[]
}

model DefaultProduct {
  id         String   @id @default(cuid())
  name       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  color      String
  imageUrl   String?
}

model Product {
  id         String   @id @default(cuid())
  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name       String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  color      String
  imageUrl   String?
  outfits    Outfit[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Outfit {
  id         String    @id @default(cuid())
  ownerId    String
  owner      User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  date       DateTime  @db.Date
  locationId Int       @default(1)
  location   Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  weather    Weather?  @relation(fields: [date, locationId], references: [date, locationId], onDelete: NoAction)
  imageUrl   String?
  comment    String?
  rating     Int       @default(0)
  products   Product[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Weather {
  date               DateTime      @db.Date
  locationId         Int
  location           Location      @relation(fields: [locationId], references: [id], onDelete: Cascade)
  status             WeatherStatus @default(sun)
  temperature        Float
  lowestTemperature  Float
  highestTemperature Float
  humidity           Int
  isForecast         Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  Outfit             Outfit[]

  @@id([date, locationId])
}

enum WeatherStatus {
  sun
  cloud
  rain
  snow
}
